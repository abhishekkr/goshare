{"name":"GoShare","tagline":"Go Share your TimeSeries/NameSpace/KeyVal DataStore (using leveldb) over HTTP &/or ZeroMQ","body":"## Go Share\r\n\r\n```ASCII\r\n                        __\r\n   ____ _____     _____/ /_  ____ _________\r\n  / __ `/ __ \\   / ___/ __ \\/ __ `/ ___/ _ \\\r\n / /_/ / /_/ /  (__  ) / / / /_/ / /  /  __/\r\n \\__, /\\____/  /____/_/ /_/\\__,_/_/   \\___/\r\n/____/\r\n\r\n```\r\n\r\n[Tasks in Queue at Trello Board](https://trello.com/b/ZjDMRGQN/goshare)\r\n\r\n#### Go Share any data among the nodes. Over HTTP or ZeroMQ.\r\n\r\n* GOShare eases up communication over HTTP GET param based interaction.\r\n* ZeroMQ REQ/REP based synchronous communication model.\r\n\r\nit's \"go get\"-able\r\n\r\n``` go get \"github.com/abhishekkr/goshare\" ```\r\n\r\n***\r\n\r\n#### Tryout:\r\n\r\n```Shell\r\n go run zxtra/goshare_daemon.go -dbpath=/tmp/GOTSDB\r\n```\r\n\r\nBy default it runs HTTP daemon at port 9999 and ZeroMQ daemon at 9797/9898,\r\nmake it run on another port using following required flags\r\n\r\n```Shell\r\n go run zxtra/goshare_daemon.go -dbpath=/tmp/GOTSDB -port=8080 -req-port=8000 -rep-port=8001\r\n```\r\n\r\n```ASCII\r\n  Dummy Clients Using It\r\n\r\n  * go run zxtra/gohttp_client.go\r\n\r\n  * go run zxtra/go0mq_client.go\r\n\r\n\r\n  for custom Port: 8080 for HTTP; Port: 8000/8001 for ZeroMQ\r\n\r\n  * go run zxtra/gohttp_client.go -port=8080\r\n\r\n  * go run zxtra/go0mq_client.go -req-port=8000 -rep-port=8001\r\n```\r\n\r\n>\r\n> To utilize it \"zxtra/gohttp_client.go\" and \"zxtra/go0mq_client.go\" can be referred on how to utilize capabilities of GoShare.\r\n>\r\n\r\n***\r\n\r\n#### Structure:\r\n\r\n> \"goshare\"'s methods to adapt these in your code:\r\n>\r\n> * GoShare() : it runs HTTP and ZeroMQ daemon in parallel goroutines\r\n> > has optional flags customization of:\r\n> > * dbpath: path for LevelDB (default: /tmp/GO.DB)\r\n> > * port: port to bind HTTP daemon (default: 9999)\r\n> > * req-port, rep-port: ports to bind ZeroMQ REQ/REP daemon (default: 9797, 9898)\r\n>\r\n> * GoShareHTTP(&lt;levigo DB handle&gt;, &lt;http port as int&gt;) : it runs HTTP daemon\r\n>\r\n> * GoShareZMQ(&lt;levigo DB handle&gt;, &lt;req-port as int&gt;, &lt;rep-port as int&gt;) : it runs ZMQ daemon\r\n>\r\n\r\n***\r\n\r\nNow visit the the link asked by it and get the help page.\r\n\r\n##### Dependency\r\n* [go lang](http://golang.org/doc/install) (obviously, the heart and soul of the app)\r\n* [leveldb](http://en.wikipedia.org/wiki/LevelDB) (we are using for datastore, it's awesome)\r\n* [levigo](https://github.com/jmhodges/levigo/blob/master/README.md) (the go library utilized to access leveldb)\r\n* [zeroMQ](http://zeromq.org/) (the supercharged Sockets giving REQuest/REPly power)\r\n* [gozmq](https://github.com/alecthomas/gozmq) GoLang ZeroMQ Bindings used here\r\n* [levigoNS](https://github.com/abhishekkr/levigoNS) NameSpace KeyVal capabilities around leveldb via levigo\r\n* [levigoTSDS](https://github.com/abhishekkr/levigoTSDS) TimeSeries KeyVal capabilties around leveldb via levigoNS\r\n\r\n[![baby-gopher](https://raw2.github.com/drnic/babygopher-site/gh-pages/images/babygopher-badge.png)](http://www.babygopher.org)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}